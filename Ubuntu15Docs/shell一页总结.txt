shell变量：
1.环境变量，
	设置环境变量用export 导出为环境变量
2.本地变量，仅shell脚本内有效
3.位置变量
 	$0 $1 $2 ... $9
   	e.g:
	#!/bin/bash
        echo "the shell script [ `basename $0` $1 $2 ] is begin running..."
4.特定变量参数：
$#	(argc,count)传递到脚本的参数个数
$@	与$#相同,但是使用时加引号,并在引号中返回每个参数
$*	(argv)以一个单字符串显示所有向脚本传递的参数。与位置变量不同,此选项参数可超过9个
$$	脚本运行的当前进程ID号
$!	后台运行的最后一个进程的进程 ID号
$-	显示shell使用的当前选项,与 set命令功能相同
$?	(res)显示最后命令的退出状态。 0表示没有错误,其他任何值表明有错误。

#!/bin/bash
echo "the shell script [ `basename $0` $1 $2 ] is begin running..."
echo "count: $#"
echo "count: $@"
echo "-----------------------"
echo "args:$*"
echo "bye bye!! " >/dev/null 2>&1
echo "res of bye:$?"


#########=====================================
• 引用的必要性。
• 双引、单引和反引号。
• 使用反斜线实现屏蔽。

1. echo 反馈文字的时候要用 " "  ,   echo "====== some world ======"
	" "可以引用除$ ` \ 三个字符以外的任意字符或字符串。三个特殊意义字符。
2.需要转义：& * + ^ $ ` " | ? '


###==================================
Test命令用于测试字符串,文件状态和数字,
expr命令测试和执行数值输出。
使用最后退出状态命令 $?可测知test和expr,二者均以0表示正确,1表示返回错误。
[ condition ]
	#要注意在条件两边加上空格。

1.文件状态测试：
-d	目录
-f	正规文件
-L	符号连接
-r	可读
-s	文件长度大于 0、非空
-w	可写
-u	文件有suid位设置
-x	可执行

测试文件逻辑： -a 逻辑and	-o 逻辑or	! 逻辑NOT

2.字符串测试：
=	两个字符串相等
!= 	两个字符串不相等
-z	is空串
-n	is not空串   e.g: [ -n $EDITOR ]

3.测试数值：
-eq 数值相等。
-ne 数值不相等。
-gt 第一个数大于第二个数。
-lt 第一个数小于第二个数。
-le 第一个数小于等于第二个数。
-ge 第一个数大于等于第二个数。   
 	e.g: [ "900" -gt "800" ]

#   ----->   expr  ------> 用法：
$expr 10 + 10
$expr 12 \* 12
$expr 120 / 12

expr 在循环中用于增量计算。首先,循环初始化为 0,然后循环值加 1,反引号的用法意
即替代命令。最基本的一种是从( expr)命令接受输出并将之放入循环变量。
	$loop=0
	$loop=`expr ${loop} + 1`

###+====================================================================
#!/bin/bash
if [ "root" != "$LOGNAME" ]; then
	echo "you need to be root to run this script" 
	exit 1
else
	#yes ,it is root
	echo "yes indeed you are %LOGNAME proceed"
fi

测试目录是否为空：
directory=$1
if [ "" = "`ls -A $directory`" ];then   #or:[ -z "`ls -A $directory`" ]
	echo "directory is empty"


##======================== case ================================
read ANS
case $ANS in
	y|Y|yes|YES) echo ".ok."
		;;
	n|N) echo "..no.."
		;;
	*) echo "`basename $0` :Unknown response"
	   exit 1
		;;
esac
##======================== for ================================
for loop in 1 2 3 4 5
do
	echo $loop
done
#------
fro params in "$*"
do 	
	...
done
##======================== until 做监视 ================================
#until 循环执行一系列命令直至条件为 true 时停止
look_for="/tmp/process.LCK"
until [ ! -f $look_for ]
do
	sleep 1
done
echo "$look_for is deleted...."
#do somethings....
#------------------------监控home------
home_size=`df|grep "/home"|awk '{print $5}'|sed 's/%//g'`
until [ "$home_size" -gt "90" ]
do
	echo "you home is nearly full" | mail user
done

##======================== while ================================
cnt=0
while [ $cnt -lt 5 ]
do	
	echo "do somethings..."
	cnt=`expr $cnt + 1`
done
##-------为文件加行号：-----
#!/bin/bash
if [ $# -ne 1 ];then
       echo "Usage:`basename $0` filename "
       exit 1
fi
   
loop=1
while read LINE
do
      echo "$loop-> $LINE"
      loop=`expr $loop + 1`
done <$1
##------<--死循环
while : 
do
	...
done

####============================menu==========================
#!/bin/bash
DATE=`date +%d/%m/%Y`
HOSTNAME=`hostname -s`
WHOAMI=`whoami`
while :
do
    tput clear
    cat <<MENU
    -------------------------------------------------------
    User:$WHOAMI        Host:$HOSTNAME      Date:$DATE 
    -------------------------------------------------------
                1: ma
                2: yong
                3: long
                4: Ubuntu
                Q: Exit Menu
    -------------------------------------------------------
MENU

echo "Input Your Choicd: "
read CHOICE
case $CHOICE in
    1) echo "ma"
        exit 1
        ;;
    2) echo "yong"
        exit 1
        ;;
    3) ;;
    4) ;;
    Q) ;;
    *) ;;
esac
done
#================================================================


#========================= shell 函数=================
function funcName(){       #可以不用标注function
	...
}
/*
可以将函数看作是脚本中的一段代码,但是有一个主要区别。执行函数时,它保留当前
shell和内存信息。此外如果执行或调用一个脚本文件中的另一段代码,将创建一个单独的shell,因而去除所有原脚本中定义的存在变量。
函数可以放在同一个文件中作为一段代码,也可以放在只包含函数的单独文件中。函数
不必包含很多语句或命令,甚至可以只包含一个 echo语句,这取决于使用者。
    所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分,
直至shell解释器首次发现它时,才可以使用。调用函数仅使用其函数名即可。

*/

#--------------------------shell 函数文件的使用-----------
1.定义函数文件。
  $vim functions.main
	function func1(){
		..
	}
	function func2(){
		..
	}
2.导入（系统定位）文件。
  $. ./functions.main
   函数文件脚本中创建的变量和函数就添加到了执行.或source的shell,直到关闭该shell窗口,否则函数文件中创建的变量和函数将一直有效,
   如果我们只是执行./run.sh启动一个subshell来运行我们的run.sh脚本,那么run.sh脚本中的变量和函数将紧紧影响到由shell启动的subshell,当./run.sh脚本退出之后,run.sh变量和函数的影响寿命也到了尽头.
3.检查载入的函数
  $set |grep "func1"       #set命令将在shell中显示所有的载入函数。
  func1()
4.要执行函数,简单地键入函数名即可。 函数有参数，需要带参数，func1 arg1 arg2
  $func1
  $<res>
5.删除shell函数：
现在对函数做一些改动。首先删除函数,使其对shell不可用。使用unset命令完成此功
能。删除函数时unset命令格式为:
	$unset func1       #如果现在键入set命令,函数将不再显示。

#---------------------------函数的两种不同方法
使用函数的两种不同方法:从原文件中调用函数 和 使用脚本中的函数（要在脚本中调用函数,首先创建函数,并确保它位于调用之前）。
#*从原文件中调用函数*
#!/bin/bash
#导入函数文件
. /home/functions.sh
#use functions....
#---------------------------

#===============================命令行最后一个参数，通常是文件名===
1.
	eval echo \$$#
2.	
	shift `expr $# - 2`


#===============================  << 的应用 ==============
<<该命令的一般形式为:
command <<WORD
some text...
WORD
这里再简要回顾一下 <<的用法。当 shell看到<<的时候,它就会知道下一个词是一个分界
符。在该分界符以后的内容都被当作输入,直到shell又看到该分界符 (位于单独的一行 )。这个分界符可以是你所定义的任何字符串。
可以使用<<来创建文件、显示文件列表、排序文件列表以及创建屏幕输入。
1.新建一个文本文件：（追加 >> or 覆写 >）
mayl@Ubun15:~/bash_box$ cat >>filename.xx<<WORD
> ni hao a 
> sha hua 
> haha .
> WORD
mayl@Ubun15:~/bash_box$ 

2.打印一段文字：
un15:~/bash_box$ lpr <<QUICKDOC
> some word
> --------------
> end
> QUICKDOC
lpr: Error - no default destination available.
mayl@Ubun15:~/bash_box$ 

3.自动FTP
echo "ftp......."
ftp -i -n $DEST_HOST<<FTPGO
user username passwd
$MODE 
get $FILE_NAME $LOCAL_FILENAME.ftp
quit
FTPGO
if [ -s $LOCAL_FILENAME.ftp ];then
	echo "File is down...OK"
else
	echo "Unable to locate $LOCAL_FILENAME.ftp"
fi

##===========================================
#创建带时间的日志文件:
THEDATE=`date +%d%m%Y`
LOG_F=/logs/backup.log.${THEDATE}
>$LOG_F
......
#创建唯一的临时文件：
$$ 该变量保存当前进程的进程号。















